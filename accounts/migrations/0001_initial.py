# Generated by Django 3.1.5 on 2021-01-25 22:32

import accounts.models
import accounts.validators
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, db_index=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('user_type', models.IntegerField(choices=[(0, 'Admin'), (3, 'Card Holder')], default=0)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.IntegerField(blank=True, choices=[(0, 'Female'), (1, 'Male')], null=True)),
                ('jwt_secret_key', models.CharField(blank=True, max_length=50, null=True)),
                ('card_holder_mobile_number', models.CharField(blank=True, max_length=20, null=True, unique=True, validators=[accounts.validators.CardHolderMobileNumberValidator()], verbose_name='mobile number')),
                ('card_holder_full_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='full name')),
                ('card_holder_address', models.CharField(blank=True, max_length=255, null=True, verbose_name='address')),
                ('card_holder_state', models.CharField(blank=True, max_length=100, null=True, verbose_name='state')),
                ('card_holder_city', models.CharField(blank=True, max_length=100, null=True, verbose_name='city')),
                ('card_holder_id_type', models.IntegerField(blank=True, choices=[(0, 'National ID'), (1, 'Passport Number'), (2, 'National Number'), (3, 'Driving License')], null=True, verbose_name='ID type')),
                ('card_holder_id_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='ID number')),
                ('card_holder_created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User created by')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', accounts.models.UserManager()),
            ],
        ),
    ]
